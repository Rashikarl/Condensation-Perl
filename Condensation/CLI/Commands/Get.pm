# BEGIN AUTOGENERATED

sub register($class, $cds, $help) {
	my $node000 = CDS::Parser::Node->new(0);
	my $node001 = CDS::Parser::Node->new(0);
	my $node002 = CDS::Parser::Node->new(0);
	my $node003 = CDS::Parser::Node->new(1, {constructor => \&new, function => \&help});
	my $node004 = CDS::Parser::Node->new(0);
	my $node005 = CDS::Parser::Node->new(0);
	my $node006 = CDS::Parser::Node->new(0);
	my $node007 = CDS::Parser::Node->new(0);
	my $node008 = CDS::Parser::Node->new(0);
	my $node009 = CDS::Parser::Node->new(0);
	my $node010 = CDS::Parser::Node->new(0);
	my $node011 = CDS::Parser::Node->new(0);
	my $node012 = CDS::Parser::Node->new(1);
	my $node013 = CDS::Parser::Node->new(0);
	my $node014 = CDS::Parser::Node->new(0);
	my $node015 = CDS::Parser::Node->new(1);
	my $node016 = CDS::Parser::Node->new(0);
	my $node017 = CDS::Parser::Node->new(0);
	my $node018 = CDS::Parser::Node->new(1, {constructor => \&new, function => \&get});
	my $node019 = CDS::Parser::Node->new(1);
	my $node020 = CDS::Parser::Node->new(0);
	my $node021 = CDS::Parser::Node->new(1, {constructor => \&new, function => \&get});
	$cds->addArrow($node000, 1, 0, 'save');
	$cds->addArrow($node001, 1, 0, 'hex');
	$cds->addArrow($node004, 1, 0, 'get');
	$cds->addArrow($node005, 1, 0, 'save', \&collectSave);
	$help->addArrow($node003, 1, 0, 'get');
	$help->addArrow($node003, 1, 0, 'save');
	$node000->addArrow($node002, 1, 0, 'data');
	$node001->addArrow($node004, 1, 0, 'dump', \&collectDump);
	$node002->addArrow($node005, 1, 0, 'of', \&collectOf);
	$node004->addArrow($node006, 1, 0, 'HASH', \&collectHash);
	$node004->addArrow($node012, 1, 0, 'HASH', \&collectHash1);
	$node004->addArrow($node012, 1, 0, 'OBJECT', \&collectObject);
	$node005->addArrow($node009, 1, 0, 'HASH', \&collectHash);
	$node005->addArrow($node015, 1, 0, 'HASH', \&collectHash1);
	$node005->addArrow($node015, 1, 0, 'OBJECT', \&collectObject1);
	$node006->addArrow($node007, 1, 0, 'on');
	$node006->addArrow($node008, 0, 0, 'from');
	$node007->addArrow($node012, 1, 0, 'STORE', \&collectStore);
	$node008->addArrow($node012, 0, 0, 'STORE', \&collectStore);
	$node009->addArrow($node010, 1, 0, 'on');
	$node009->addArrow($node011, 0, 0, 'from');
	$node010->addArrow($node015, 1, 0, 'STORE', \&collectStore);
	$node011->addArrow($node015, 0, 0, 'STORE', \&collectStore);
	$node012->addArrow($node013, 1, 0, 'decrypted');
	$node012->addDefault($node018);
	$node013->addArrow($node014, 1, 0, 'with');
	$node014->addArrow($node018, 1, 0, 'AESKEY', \&collectAeskey);
	$node015->addArrow($node016, 1, 0, 'decrypted');
	$node015->addDefault($node019);
	$node016->addArrow($node017, 1, 0, 'with');
	$node017->addArrow($node019, 1, 0, 'AESKEY', \&collectAeskey);
	$node019->addArrow($node020, 1, 0, 'as');
	$node020->addArrow($node021, 1, 0, 'FILENAME', \&collectFilename);
}

sub collectAeskey($o, $label, $value) {
	$o:aesKey = $value;
}

sub collectDump($o, $label, $value) {
	$o:hexDump = 1;
}

sub collectFilename($o, $label, $value) {
	$o:filename = $value;
}

sub collectHash($o, $label, $value) {
	$o:hash = $value;
}

sub collectHash1($o, $label, $value) {
	$o:hash = $value;
	$o:store = $o:actor->preferredStore;
}

sub collectObject($o, $label, $value) {
	$o:hash = $value->hash;
	$o:store = $value->cliStore;
}

sub collectObject1($o, $label, $value) {
	$o:hash = $value->hash;
	push @$o:stores, $value->store;
}

sub collectOf($o, $label, $value) {
	$o:saveData = 1;
}

sub collectSave($o, $label, $value) {
	$o:saveObject = 1;
}

sub collectStore($o, $label, $value) {
	$o:store = $value;
}

sub new($class, $actor) { bless {actor => $actor, ui => $actor->ui} }

# END AUTOGENERATED

# HTML FOLDER NAME store-get
# HTML TITLE Get
sub help($o, $cmd) {
	my $ui = $o:ui;
	$ui->space;
	$ui->command('cds get OBJECT');
	$ui->command('cds get HASH on STORE');
	$ui->p('Downloads an object and writes it to STDOUT. If the object is not found, the program quits with exit code 1.');
	$ui->space;
	$ui->command('cds get HASH');
	$ui->p('As above, but uses the selected store.');
	$ui->space;
	$ui->command('… decrypted with AESKEY');
	$ui->p('Decrypts the object after retrieval.');
	$ui->space;
	$ui->command('cds save … as FILENAME');
	$ui->p('Saves the object to FILENAME instead of writing it to STDOUT.');
	$ui->space;
	$ui->command('cds save data of … as FILENAME');
	$ui->p('Saves the object\'s data to FILENAME.');
	$ui->space;
	$ui->command('cds hex dump …');
	$ui->p('Writes the object as hex string to STDOUT.');
	$ui->space;
	$ui->title('Related commands');
	$ui->line('cds open envelope OBJECT');
	$ui->line('cds show record OBJECT [decrypted with AESKEY]');
	$ui->line('cds show hashes of OBJECT');
	$ui->space;
}

sub get($o, $cmd) {
	$cmd->collect($o);

	# Retrieve the object
	my $object = $o:actor->uiGetObject($o:hash, $o:store, $o:actor->preferredKeyPairToken) // return;

	# Decrypt
	$object = $object->crypt($o:aesKey) if defined $o:aesKey;

	# Output
	if ($o:saveData) {
		CDS->writeBytesToFile($o:filename, $object->data) // return $o:ui->error('Failed to write data to "', $o:filename, '".');
		$o:ui->pGreen(length $object->data, ' bytes written to ', $o:filename, '.');
	} elsif ($o:saveObject) {
		CDS->writeBytesToFile($o:filename, $object->bytes) // return $o:ui->error('Failed to write object to "', $o:filename, '".');
		$o:ui->pGreen(length $object->bytes, ' bytes written to ', $o:filename, '.');
	} elsif ($o:hexDump) {
		$o:ui->raw(unpack('H*', $object->bytes)."\n");
	} else {
		$o:ui->raw($object->bytes);
	}
}
